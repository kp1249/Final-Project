# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bK1JrC_xKBtgWp-wSA4fmQUSKZFkkdKm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

df = pd.read_csv("ballparks.csv")
df['total_wall'] = df['left_field'] + df['right_field'] + df['center_field']
df['x1'] = (df['elevation'] + df['total_wall']) * df['avg_temp']
df.head()

df['min_wall_height'].mean()
df['min_wall_height'].median()
df['min_wall_height'].std()

df['max_wall_height'].mean()
df['max_wall_height'].median()
df['max_wall_height'].std()

df['total_wall'].mean()
df['total_wall'].median()
df['total_wall'].std()

df['hr_park_effects'].mean()
df['hr_park_effects'].median()
df['hr_park_effects'].std()

df['extra_distance'].mean()
df['extra_distance'].median()
df['extra_distance'].std()

df['avg_temp'].mean()
df['avg_temp'].median()
df['avg_temp'].std()

df['elevation'].mean()
df['elevation'].median()
df['elevation'].std()

df['roof'].mean()
df['roof'].median()
df['roof'].std()

df['daytime'].mean()
df['daytime'].median()
df['daytime'].std()


# scatter plot of hr_park_effects and elevation
plt.scatter(df['hr_park_effects'], df['elevation'])
plt.xlabel('HR Park Effects')
plt.ylabel('Elevation')
plt.title('Scatter Plot of HR Park Effects vs. Elevation')
plt.show()

# scatter plot of hr_park_effects and total_wall
plt.scatter(df['hr_park_effects'], df['total_wall'])
plt.xlabel('HR Park Effects')
plt.ylabel('Total Wall')
plt.title('Scatter Plot of HR Park Effects vs. Total Wall')
plt.show()

# scatter plot of hr_park_effects and min_wall_height
plt.scatter(df['hr_park_effects'], df['min_wall_height'])
plt.xlabel('HR Park Effects')
plt.ylabel('Min Wall Height')
plt.title('Scatter Plot of HR Park Effects vs. Min Wall Height')
plt.show()

# scatter plot of max_wall_height and hr_park_effects
plt.scatter(df['hr_park_effects'], df['max_wall_height'])
plt.xlabel('HR Park Effects')
plt.ylabel('Max Wall Height')
plt.title('Scatter Plot of HR Park Effects vs. Max Wall Height')
plt.show()

# scatter plot of extra_distance and hr_park_effects
plt.scatter(df['hr_park_effects'], df['extra_distance'])
plt.xlabel('HR Park Effects')
plt.ylabel('Extra Distance')
plt.title('Scatter Plot of HR Park Effects vs. Extra Distance')
plt.show()


# linear regression of elevation on hr_park_effects
X = df['elevation'].values.reshape(-1, 1)
y = df['hr_park_effects']

model = LinearRegression()
model.fit(X, y)

print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_[0])
print("R-squared:", model.score(X, y))

# linear regression of min_wall_height on hr_park_effects
X = df['min_wall_height'].values.reshape(-1, 1)
y = df['hr_park_effects']

model = LinearRegression()
model.fit(X, y)

print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_[0])
print("R-squared:", model.score(X, y))

# linear regression of total_wall on hr_park_effects
X = df['total_wall'].values.reshape(-1, 1)
y = df['hr_park_effects']

model = LinearRegression()
model.fit(X, y)

print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_[0])
print("R-squared:", model.score(X, y))

# linear regression of max_wall_height on hr_park_effects
X = df['max_wall_height'].values.reshape(-1, 1)
y = df['hr_park_effects']

model = LinearRegression()
model.fit(X, y)

print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_[0])
print("R-squared:", model.score(X, y))

# linear regression of extra_distance on hr_park_effects
X = df['extra_distance'].values.reshape(-1, 1)
y = df['hr_park_effects']

model = LinearRegression()
model.fit(X, y)

print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_[0])
print("R-squared:", model.score(X, y))